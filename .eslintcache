[{"/Users/nambk/Documents/Projects/Prime/src/index.js":"1","/Users/nambk/Documents/Projects/Prime/src/reportWebVitals.js":"2","/Users/nambk/Documents/Projects/Prime/src/components/app/index.js":"3","/Users/nambk/Documents/Projects/Prime/src/components/header.js":"4","/Users/nambk/Documents/Projects/Prime/src/components/footer.js":"5","/Users/nambk/Documents/Projects/Prime/src/lib/PrimeForm.js":"6"},{"size":512,"mtime":1608481232913,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1608365553545,"results":"9","hashOfConfig":"8"},{"size":452,"mtime":1608631847221,"results":"10","hashOfConfig":"8"},{"size":2720,"mtime":1608567130499,"results":"11","hashOfConfig":"8"},{"size":1883,"mtime":1608568021944,"results":"12","hashOfConfig":"8"},{"size":3940,"mtime":1608626916073,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"134qgml",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},"/Users/nambk/Documents/Projects/Prime/src/index.js",[],["28","29"],"/Users/nambk/Documents/Projects/Prime/src/reportWebVitals.js",[],"/Users/nambk/Documents/Projects/Prime/src/components/app/index.js",[],"/Users/nambk/Documents/Projects/Prime/src/components/header.js",[],"/Users/nambk/Documents/Projects/Prime/src/components/footer.js",[],"/Users/nambk/Documents/Projects/Prime/src/lib/PrimeForm.js",["30","31","32","33","34","35","36","37"],"import React from 'react';\n\n// Render the input form to enter a number\nclass PrimeForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputNum: '',\n      answer: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({\n      inputNum: e.target.value\n    });\n  }\n\n  handleSubmit(e) {\n    // alert('Submitted data: ' + this.state.inputNum);\n    e.preventDefault();\n    const num = this.state.inputNum\n    \n    // // Naive way to check a prime\n    // function isPrime(number) {\n    //   if(num < 2) return false;\n\n    //   for (let k = 2; k < num; k++){\n    //     if( num % k == 0){\n    //       return false;\n    //     }\n    //   }\n    //   return true;\n    // }\n\n    function isPrime(number) {\n      if (number < 2) return false;\n      if (number % 2 == 0) return (number == 2);\n      const sqrt = Math.sqrt(number);\n      // var i;\n      for (let i = 3; i <= sqrt; i += 2) {\n          if (number % i == 0) return false;\n      }\n      return true;\n    }\n\n    function findPrimeLoop(oddNumber) {\n      while (!isPrime(oddNumber)) {\n        oddNumber -= 2;\n      }\n      return oddNumber\n    }\n\n    // Find prime < input number\n    function calcPrime(number) {\n      var num = parseInt(number);\n\n      if (num < 0) {\n        alert('Please input a positive integer!');\n        return ''\n      }\n\n      if ((num == 0) || (num == 1) || (num == 2)) {\n        return 'None'\n      }\n\n      if (num == 3) {\n        return '2'\n      }\n\n      if (num > Number.MAX_SAFE_INTEGER) {\n        return 'Input a number less than 2^53 - 1'\n      }\n      \n      if (num % 2 == 0) {\n        num -= 1;\n        if (isPrime(num)) {\n          return num\n        } else {\n          return findPrimeLoop(num)\n        }\n      } else {\n        if (isPrime(num)) num -= 2;\n        return findPrimeLoop(num)\n      }\n\n\n      // Benchmark\n      // Freezing browser\n      // Failsafe -1 0 1 2 2.2 10e4(99991)\n\n      // Sieve: https://www.geeksforgeeks.org/nearest-prime-less-given-number-n/\n      // https://stackoverflow.com/questions/3885817/how-do-i-check-that-a-number-is-float-or-integer/20779354#20779354\n\n      // Number.MAX_SAFE_INTEGER: (2^53 - 1) = 9,007,199,254,740,992 / 9007199254740992\n\n      // Number.isInteger(123) //true\n      // Number.isInteger(-123) //true\n      // Number.isInteger(5-2) //true\n      // Number.isInteger(0) //true\n      // Number.isInteger(0.5) //false\n      // Number.isInteger('123') //false\n      // Number.isInteger(false) //false\n      // Number.isInteger(Infinity) //false\n      // Number.isInteger(-Infinity) //false\n      // Number.isInteger(0 / 0) //false\n    }\n\n    // // Find prime <= input number\n    // function calcPrime(number) {\n    //   var num = parseInt(number)\n\n    //   if (num < 0) {\n    //     alert('Please input a positive integer!');\n    //     return ''\n    //   }\n\n    //   if ((num == 0) || (num == 1) || (num == 2)) {\n    //     return 'None'\n    //   }\n\n    //   if (num > Number.MAX_SAFE_INTEGER) {\n    //     return 'Input a number less than 2^53 - 1'\n    //   }\n      \n    //   if (num % 2 == 0) {\n    //     num -= 1;\n    //     if (isPrime(num)) {\n    //       return num\n    //     } else {\n    //       return findPrimeLoop(num)\n    //     }\n    //   } else {\n    //     return findPrimeLoop(num)\n    //   }\n    // }\n\n    this.setState({\n      answer: calcPrime(num)\n    })    \n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>In put a number:\n          <input type=\"number\" value={this.state.inputNum} onChange={this.handleChange} placeholder=\"Enter a number\"/>\n        </label>\n        <input type=\"submit\" value=\"Find Prime\" /><br/>\n        <label>Highest prime #:\n          <input type=\"text\" value={this.state.answer} readOnly />   \n        </label>\n      </form>\n    );\n  }\n}\n\nexport default PrimeForm;",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":40,"column":22,"nodeType":"44","messageId":"45","endLine":40,"endColumn":24},{"ruleId":"42","severity":1,"message":"43","line":40,"column":43,"nodeType":"44","messageId":"45","endLine":40,"endColumn":45},{"ruleId":"42","severity":1,"message":"43","line":44,"column":26,"nodeType":"44","messageId":"45","endLine":44,"endColumn":28},{"ruleId":"42","severity":1,"message":"43","line":65,"column":16,"nodeType":"44","messageId":"45","endLine":65,"endColumn":18},{"ruleId":"42","severity":1,"message":"43","line":65,"column":30,"nodeType":"44","messageId":"45","endLine":65,"endColumn":32},{"ruleId":"42","severity":1,"message":"43","line":65,"column":44,"nodeType":"44","messageId":"45","endLine":65,"endColumn":46},{"ruleId":"42","severity":1,"message":"43","line":69,"column":15,"nodeType":"44","messageId":"45","endLine":69,"endColumn":17},{"ruleId":"42","severity":1,"message":"43","line":77,"column":19,"nodeType":"44","messageId":"45","endLine":77,"endColumn":21},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]